import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.support.test.InstrumentationRegistry;
import android.support.test.rule.ActivityTestRule;
import android.support.test.runner.AndroidJUnit4;
import android.support.test.uiautomator.*;
import com.example.arkadiusz.androidtvtest.MainActivity;
import org.junit.*;
import org.junit.runner.RunWith;

import java.io.File;

@RunWith(AndroidJUnit4.class)
public class MyUiAutomatorTest {
    @Rule
    public ActivityTestRule<MainActivity> mActivityRule
            = new ActivityTestRule<>(MainActivity.class);

    private UiDevice mDevice;

    @Before
    public void setUp() {
        // Initialize UiDevice instance

        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
        // Start from the home screen
        mDevice.pressHome();

        mDevice.wait(Until.hasObject(By.pkg(getLauncherPackageName()).depth(0)), 1000);
    }

    @Test
    public void checkAppsGoogle() throws UiObjectNotFoundException {

        // Simulate a short press on the HOME button.
        mDevice.pressHome();

        // We’re now in the home screen. Next, we want to simulate
        // a user bringing up the All Apps screen.
        // If you use the uiautomatorviewer tool to capture a snapshot
        // of the Home screen, notice that the All Apps button’s
        // content-description property has the value “Apps”. We can
        // use this property to create a UiSelector to find the button.

        UiObject allAppsButton = mDevice.findObject(new UiSelector().description("Apps"));

        // Simulate a click to bring up the All Apps screen.
        allAppsButton.clickAndWaitForNewWindow();

    // In the All Apps screen, the Settings app is located in
    // the Apps tab. To simulate the user bringing up the Apps tab,
    // we create a UiSelector to find a tab with the text
    // label “Apps”
//        if (new UiSelector().text("AndroidTvTest").toString().equals("AndroidTvTest")) {
//         mDevice.pressDPadRight();
//         mDevice.pressDPadRight();
//        }

        if(mDevice.findObject(new UiSelector().text("AndroidTvTest")).exists()){
            mDevice.pressDPadRight();
            mDevice.pressDPadRight();
        }
        UiObject appsTab = mDevice.findObject(new UiSelector().textContains("Videos by Google"));


        // Simulate a click to enter the Apps tab.
        appsTab.click();

       // File file = new File("filesnap.png");

      //  Assert.assertEquals(true, mDevice.takeScreenshot(file));

        // Next, in the apps tabs, we can simulate a user swiping until
        // they come to the Settings app icon. Since the container view
//        // is scrollable, we can use a UiScrollable object.
//        UiScrollable appViews = new UiScrollable(
//                new UiSelector().scrollable(true));
//
//        // Set the swiping mode to horizontal (the default is vertical)
//        appViews.setAsHorizontalList();
//
//        // create a UiSelector to find the Settings app and simulate
//        // a user click to launch the app.
//        UiObject settingsApp = appViews
//                .getChildByText(new UiSelector()
//                                .className(android.widget.TextView.class.getName()),
//                        "Settings");
//        settingsApp.clickAndWaitForNewWindow();
//
//        // Validate that the package name is the expected one
//        UiObject settingsValidation = new UiObject(
//                new UiSelector()
//                        .packageName("com.android.settings"));
//        assertThat(settingsValidation.exists(), equalTo(true));
    }

    @Test
    public void checkApps() throws UiObjectNotFoundException {

        mDevice.pressHome();

        UiObject allAppsButton = mDevice.findObject(new UiSelector().description("Apps"));

        allAppsButton.clickAndWaitForNewWindow();

        if(mDevice.findObject(new UiSelector().text("Videos by Google")).exists()){
            mDevice.pressDPadLeft();
            mDevice.pressDPadLeft();
        }

        UiObject appsTab = mDevice.findObject(new UiSelector().text("AndroidTvTest"));

        appsTab.click();
    }

    private String getLauncherPackageName() {
        // Create launcher Intent
        final Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);

        // Use PackageManager to get the launcher package name
        PackageManager pm = InstrumentationRegistry.getContext().getPackageManager();
        ResolveInfo resolveInfo = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
        return resolveInfo.activityInfo.packageName;
    }

    @After
    public void tearDown() {
        // Taking screenshot after test
        mDevice.takeScreenshot(new File("/media/arkadiusz/7A8C460A8C45C0FD/projekty_AndroidTv/screenshot-file-name.jpg"));
    }
}



import android.content.Context;
import android.content.Intent;
import android.support.test.InstrumentationRegistry;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.junit.Assert.assertEquals;

public class SimpleTest {

    private static final long DEFAULT_TIMEOUT = 30000L;
    private static final String PACKAGE_NAME = "com.example.arkadiusz.androidtvtest";
    private UiDevice device;

    @Before
    public void setUp() {
        // Disabling waiting for selector implicit timeout
        Configurator.getInstance().setWaitForSelectorTimeout(0);
        // Initializing UiDevice instance
        device = UiDevice.getInstance(InstrumentationRegistry
                .getInstrumentation());

        // Starting the app
        Context context = InstrumentationRegistry.getInstrumentation()
                .getContext();
        Intent intent = context.getPackageManager()
                .getLaunchIntentForPackage(PACKAGE_NAME)
                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        context.startActivity(intent);

        // Waiting for app activity to appear
        device.wait(Until
                        .hasObject(By.pkg(PACKAGE_NAME).depth(0)),
                DEFAULT_TIMEOUT);
    }

    @Test
    public void formTest() {
        // Finding element
        UiObject2 editText = device.findObject(By.text("edit_text"));
        // Sending text to element
        editText.setText("123456");

        // Waiting for element
        BySelector submitButtonSelector = By.text("submit");
        UiObject2 submitButton = device.wait(Until
                        .findObject(submitButtonSelector),
                DEFAULT_TIMEOUT);
        // Clicking on element
        submitButton.click();

        BySelector alertSelector = By.desc("alert");
        // Waiting for alert to appear
        UiObject2 alert = device.wait(Until.findObject(alertSelector),
                DEFAULT_TIMEOUT);
        assertEquals(alert.getText(), "Success!");
    }

    @After
    public void tearDown() {
        // Taking screenshot after test
        device.takeScreenshot(new File("screenshot-file-name.jpg"));
    }
}